"use client";
import React from "react";
import { useQuery } from "@tanstack/react-query";
import { useUser } from "@clerk/nextjs";
import axios from "axios";
import Link from "next/link";
import dayjs from "dayjs";
import { QuestionManager, UserProgressManager, GameFlowManager } from "../lib/gameLogic";
import LoadingSkeleton from "./LoadingSkeleton";

interface User {
  id: string;
  username: string;
  email: string;
  imageUrl: string;
  role: string;
  Rewards: [{
    id: string;
    points: number;
    userId: string;
  }];
}

interface Question {
  id: string;
  content: string;
  status: string;
  createdAt: string;
  rewardPoints?: number;
  user: {
    username: string;
  };
  answers?: Array<{
    id: string;
    content: string;
    isCorrect: boolean;
    userId: string;
    user: {
      id: string;
      role: string;
    };
  }>;
}

const RoleBasedHomePage = () => {
  const { user } = useUser();

  // Fetch current user data
  const { data: currentUserData, isLoading: isLoadingUser } = useQuery<User>({
    queryKey: ["currentUser", user?.id],
    queryFn: async () => {
      const res = await axios.get(`/api/users/${user?.id}`);
      return res.data;
    },
    enabled: !!user?.id,
  });

  // Fetch questions
  const { data: questions, isLoading: isLoadingQuestions, error: questionsError } = useQuery<Question[]>({
    queryKey: ["questions"],
    queryFn: async () => {
      const res = await axios.get("/api/questions");
      return res.data;
    },
    retry: 3,
    retryDelay: 1000,
  });

  if (isLoadingUser || isLoadingQuestions) {
    return <LoadingSkeleton type={isLoadingUser ? "general" : "questions"} />;
  }

  if (questionsError) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-purple-50">
        <div className="card w-96 bg-base-100 shadow-xl">
          <div className="card-body text-center">
            <div className="text-6xl mb-4">‚ùå</div>
            <h2 className="card-title justify-center">‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î</h2>
            <p className="text-gray-600 mb-4">‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÑ‡∏î‡πâ</p>
            <div className="card-actions justify-center">
              <button 
                onClick={() => window.location.reload()}
                className="btn btn-primary"
              >
                ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  const isAdmin = currentUserData?.role === "admin";
  const userPoints = currentUserData?.Rewards?.[0]?.points || 0;

  if (isAdmin) {
    return <AdminDashboardView questions={questions || []} />;
  }

  // Use simple view for better compatibility
  if (questions && user?.id) {
    return <SimpleUserView 
      questions={questions.filter(q => q.status === 'production')}
      userPoints={userPoints}
      userName={user?.firstName || user?.username || "‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô"}
      userId={user.id}
    />;
  }

  return <div className="min-h-screen flex items-center justify-center">
    <div className="loading loading-spinner loading-lg"></div>
  </div>;
};

// Admin Dashboard View
const AdminDashboardView: React.FC<{ questions: Question[] }> = ({ questions }) => {
  const totalQuestions = questions.length;
  const activeQuestions = questions.filter(q => q.status === "production").length;
  const draftQuestions = questions.filter(q => q.status === "draft").length;
  
  const recentQuestions = questions.slice(0, 5);

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-gradient-to-r from-blue-600 to-purple-600 text-white">
        <div className="container mx-auto px-6 py-8">
          <h1 className="text-4xl font-bold mb-2">‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö</h1>
          <p className="text-blue-100">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏£‡∏∞‡∏ö‡∏ö</p>
        </div>
      </div>

      <div className="container mx-auto px-6 py-8">
        {/* Quick Stats */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          <div className="card bg-white shadow-lg hover:shadow-xl transition-shadow">
            <div className="card-body">
              <div className="flex items-center">
                <div className="text-3xl mr-4">üìä</div>
                <div>
                  <h3 className="text-2xl font-bold text-gray-800">{totalQuestions}</h3>
                  <p className="text-gray-600">‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</p>
                </div>
              </div>
            </div>
          </div>

          <div className="card bg-white shadow-lg hover:shadow-xl transition-shadow">
            <div className="card-body">
              <div className="flex items-center">
                <div className="text-3xl mr-4">‚úÖ</div>
                <div>
                  <h3 className="text-2xl font-bold text-green-600">{activeQuestions}</h3>
                  <p className="text-gray-600">‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</p>
                </div>
              </div>
            </div>
          </div>

          <div className="card bg-white shadow-lg hover:shadow-xl transition-shadow">
            <div className="card-body">
              <div className="flex items-center">
                <div className="text-3xl mr-4">üìù</div>
                <div>
                  <h3 className="text-2xl font-bold text-yellow-600">{draftQuestions}</h3>
                  <p className="text-gray-600">‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏£‡πà‡∏≤‡∏á</p>
                </div>
              </div>
            </div>
          </div>

          <div className="card bg-white shadow-lg hover:shadow-xl transition-shadow">
            <div className="card-body">
              <div className="flex items-center">
                <div className="text-3xl mr-4">üë•</div>
                <div>
                  <h3 className="text-2xl font-bold text-purple-600">0</h3>
                  <p className="text-gray-600">‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå</p>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Quick Actions */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
          <Link href="/create" className="card bg-gradient-to-r from-green-500 to-green-600 text-white hover:from-green-600 hover:to-green-700 transition-all">
            <div className="card-body">
              <div className="flex items-center">
                <div className="text-4xl mr-4">‚ûï</div>
                <div>
                  <h3 className="text-xl font-bold">‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà</h3>
                  <p className="text-green-100">‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö</p>
                </div>
              </div>
            </div>
          </Link>

          <Link href="/admin" className="card bg-gradient-to-r from-blue-500 to-blue-600 text-white hover:from-blue-600 hover:to-blue-700 transition-all">
            <div className="card-body">
              <div className="flex items-center">
                <div className="text-4xl mr-4">‚öôÔ∏è</div>
                <div>
                  <h3 className="text-xl font-bold">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°</h3>
                  <p className="text-blue-100">‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‡∏•‡∏ö ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°</p>
                </div>
              </div>
            </div>
          </Link>

          <Link href="/admin/analytics" className="card bg-gradient-to-r from-purple-500 to-purple-600 text-white hover:from-purple-600 hover:to-purple-700 transition-all">
            <div className="card-body">
              <div className="flex items-center">
                <div className="text-4xl mr-4">üìà</div>
                <div>
                  <h3 className="text-xl font-bold">‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥</h3>
                  <p className="text-purple-100">‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°</p>
                </div>
              </div>
            </div>
          </Link>
        </div>

        {/* Recent Questions */}
        <div className="card bg-white shadow-lg">
          <div className="card-body">
            <h2 className="text-2xl font-bold mb-6">‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</h2>
            <div className="space-y-4">
              {recentQuestions.map((question: Question) => (
                <div key={question.id} className="flex items-center justify-between p-4 border rounded-lg hover:bg-gray-50">
                  <div className="flex-1">
                    <h3 className="font-medium text-gray-800 truncate">{question.content}</h3>
                    <p className="text-sm text-gray-500">
                      ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠ {dayjs(question.createdAt).format("DD/MM/YYYY HH:mm")}
                    </p>
                  </div>
                  <div className="flex items-center gap-2">
                    <span className={`badge ${question.status === 'production' ? 'badge-success' : 'badge-warning'}`}>
                      {question.status}
                    </span>
                    <Link href={`/admin/questions/${question.id}/edit`} className="btn btn-sm btn-outline">
                      ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                    </Link>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

// User Game View
const UserGameView: React.FC<{
  gameSession: any;
  userPoints: number;
  userName: string;
}> = ({ gameSession, userPoints, userName }) => {
  const { availableQuestions, userProgress, recommendedQuestion, gameStats } = gameSession;

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-purple-50 to-pink-50">
      {/* Hero Section */}
      <div className="container mx-auto px-6 py-8">
        <div className="text-center mb-8">
          <h1 className="text-5xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent mb-4">
            üéÆ Quiz Game
          </h1>
          <p className="text-xl text-gray-600 mb-6">
            ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö <span className="font-bold text-purple-600">{userName}</span>!
          </p>
          
          {/* User Stats */}
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-8 max-w-4xl mx-auto">
            <div className="card bg-white shadow-lg">
              <div className="card-body text-center py-4">
                <div className="text-3xl font-bold text-yellow-500">{userPoints}</div>
                <div className="text-sm text-gray-600">‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°</div>
              </div>
            </div>
            <div className="card bg-white shadow-lg">
              <div className="card-body text-center py-4">
                <div className="text-3xl font-bold text-green-500">{userProgress.totalAnswered}</div>
                <div className="text-sm text-gray-600">‡∏ï‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß</div>
              </div>
            </div>
            <div className="card bg-white shadow-lg">
              <div className="card-body text-center py-4">
                <div className="text-3xl font-bold text-blue-500">{availableQuestions.length}</div>
                <div className="text-sm text-gray-600">‡πÄ‡∏´‡∏•‡∏∑‡∏≠</div>
              </div>
            </div>
            <div className="card bg-white shadow-lg">
              <div className="card-body text-center py-4">
                <div className="text-3xl font-bold text-purple-500">{userProgress.accuracy.toFixed(1)}%</div>
                <div className="text-sm text-gray-600">‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥</div>
              </div>
            </div>
          </div>

          {/* Progress Bar */}
          <div className="max-w-2xl mx-auto mb-8">
            <div className="flex justify-between text-sm text-gray-600 mb-2">
              <span>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤</span>
              <span>{gameStats.completionRate}%</span>
            </div>
            <progress 
              className="progress progress-primary w-full h-3" 
              value={gameStats.completionRate} 
              max="100"
            ></progress>
          </div>
        </div>

        {/* Available Questions */}
        {availableQuestions.length > 0 ? (
          <>
            <h2 className="text-3xl font-bold text-center mb-8 text-gray-800">
              üéØ ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì
            </h2>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {availableQuestions.map((question: Question, index: number) => (
                <div key={question.id} className="card bg-white shadow-xl hover:shadow-2xl transform hover:scale-105 transition-all duration-300">
                  <div className="card-body">
                    <div className="flex items-center gap-2 mb-3">
                      <div className="badge badge-primary">‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° #{index + 1}</div>
                      <div className="badge badge-accent">
                        üèÜ {question.rewardPoints || 5} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
                      </div>
                    </div>
                    <h3 className="card-title text-lg leading-relaxed mb-4">
                      {question.content}
                    </h3>
                    <div className="card-actions justify-center">
                      <Link 
                        href={`/usersendanswer/${question.id}`}
                        className="btn btn-primary btn-lg w-full bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600 border-none"
                      >
                        üéÆ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô!
                      </Link>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </>
        ) : (
          <div className="text-center py-12">
            <div className="text-8xl mb-6">üéâ</div>
            <h2 className="text-3xl font-bold text-gray-800 mb-4">‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢!</h2>
            <p className="text-xl text-gray-600 mb-6">‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß</p>
            <Link href="/components/ranking" className="btn btn-primary btn-lg">
              ‡∏î‡∏π‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì üèÜ
            </Link>
          </div>
        )}

        {/* Recently Answered */}
        {userProgress.totalAnswered > 0 && (
          <>
            <h2 className="text-2xl font-bold text-center mt-12 mb-6 text-gray-700">
              üìö ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
            </h2>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6 max-w-4xl mx-auto">
              <div className="card bg-white shadow-lg">
                <div className="card-body text-center">
                  <div className="text-4xl mb-2">üéØ</div>
                  <h3 className="text-xl font-bold text-gray-800">{userProgress.correctAnswers}</h3>
                  <p className="text-gray-600">‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á</p>
                </div>
              </div>
              <div className="card bg-white shadow-lg">
                <div className="card-body text-center">
                  <div className="text-4xl mb-2">üìä</div>
                  <h3 className="text-xl font-bold text-gray-800">{userProgress.accuracy.toFixed(1)}%</h3>
                  <p className="text-gray-600">‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á</p>
                </div>
              </div>
              <div className="card bg-white shadow-lg">
                <div className="card-body text-center">
                  <div className="text-4xl mb-2">üèÜ</div>
                  <h3 className="text-xl font-bold text-gray-800">{gameStats.averageDifficulty}</h3>
                  <p className="text-gray-600">‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å</p>
                </div>
              </div>
            </div>
          </>
        )}
      </div>
    </div>
  );
};

// Simple fallback user view
const SimpleUserView: React.FC<{
  questions: Question[];
  userPoints: number;
  userName: string;
  userId: string;
}> = ({ questions, userPoints, userName, userId }) => {
  // Simple filter for questions user hasn't answered
  const availableQuestions = questions.filter(question => {
    const hasAnswered = question.answers?.some(
      answer => answer.user.role !== 'admin' && answer.userId === userId
    ) || false;
    return !hasAnswered;
  });

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-purple-50 to-pink-50">
      <div className="container mx-auto px-6 py-8">
        <div className="text-center mb-8">
          <h1 className="text-5xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent mb-4">
            üéÆ Quiz Game
          </h1>
          <p className="text-xl text-gray-600 mb-6">
            ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö <span className="font-bold text-purple-600">{userName}</span>!
          </p>
          
          <div className="card bg-white shadow-lg inline-block">
            <div className="card-body text-center py-4">
              <div className="text-3xl font-bold text-yellow-500">{userPoints}</div>
              <div className="text-sm text-gray-600">‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°</div>
            </div>
          </div>
        </div>

        {availableQuestions.length > 0 ? (
          <>
            <h2 className="text-3xl font-bold text-center mb-8 text-gray-800">
              üéØ ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì
            </h2>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {availableQuestions.map((question: Question, index: number) => (
                <div key={question.id} className="card bg-white shadow-xl hover:shadow-2xl transform hover:scale-105 transition-all duration-300">
                  <div className="card-body">
                    <div className="flex items-center gap-2 mb-3">
                      <div className="badge badge-primary">‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° #{index + 1}</div>
                      <div className="badge badge-accent">
                        üèÜ {question.rewardPoints || 5} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
                      </div>
                    </div>
                    <h3 className="card-title text-lg leading-relaxed mb-4">
                      {question.content}
                    </h3>
                    <div className="card-actions justify-center">
                      <Link 
                        href={`/usersendanswer/${question.id}`}
                        className="btn btn-primary btn-lg w-full bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600 border-none"
                      >
                        üéÆ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô!
                      </Link>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </>
        ) : (
          <div className="text-center py-12">
            <div className="text-8xl mb-6">üéâ</div>
            <h2 className="text-3xl font-bold text-gray-800 mb-4">‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢!</h2>
            <p className="text-xl text-gray-600 mb-6">‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß</p>
            <Link href="/components/ranking" className="btn btn-primary btn-lg">
              ‡∏î‡∏π‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì üèÜ
            </Link>
          </div>
        )}
      </div>
    </div>
  );
};

export default RoleBasedHomePage;